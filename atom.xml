<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yvainefire.github.io</id>
    <title>Gridea</title>
    <updated>2020-07-28T13:40:06.281Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yvainefire.github.io"/>
    <link rel="self" href="https://yvainefire.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://yvainefire.github.io/images/avatar.png</logo>
    <icon>https://yvainefire.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[ucosii运行流程]]></title>
        <id>https://yvainefire.github.io/post/ucosii-yun-xing-liu-cheng/</id>
        <link href="https://yvainefire.github.io/post/ucosii-yun-xing-liu-cheng/">
        </link>
        <updated>2020-07-28T13:04:04.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="ucosii运行流程">ucosii运行流程</h1>
<h2 id="一系统时钟中断额初始化">一.系统时钟中断额初始化</h2>
<p>SysTick中断初始化，在轮转调度过程中，需要一个时钟中断来进行任务的切换。时钟中断的频率就是系统的心跳，也被称为时基，它决定了操作系统进行任务切换的频率。</p>
<h2 id="二操作系统初始化">二.操作系统初始化</h2>
<h3 id="1osinithookbegin">1.OSInitHookBegin()</h3>
<p>主要进行一些扩展功能的初始化</p>
<h3 id="2os_initmisc">2.OS_InitMisc()</h3>
<p>主要作用：进行杂项变量的初始化，主要有以下内容需要被初始化</p>
<pre><code class="language-c">OSIntNesting    		中断嵌套层数清零
OSLockNesting			
OSTaskCtr				任务计数清零
OSRunning				操作系统运行标志位清零
OSCtxSwCtr				任务切换计数清零
OSIdleCtr				
</code></pre>
<h3 id="3os_initrdylist">3.OS_InitRdyList()</h3>
<p>就绪队列的初始化，所谓就绪队列指由就绪任务构成的队列，但是这里实际上初始化的并不是队列，就绪队列里面保存的也不是就绪任务的TCB。</p>
<pre><code class="language-c">//以下是就绪队列实现的定义和初始化的代码
typedef unsigned char INT8U;

typedef  INT8U    OS_PRIO;

OS_EXT  OS_PRIO           OSRdyTbl[OS_RDY_TBL_SIZE];

for (i = 0u; i &lt; OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0u;
    }

</code></pre>
<p>从这里可以看出，就绪队列的本质是一个8位无符号整型数组，仅仅保存的是一个整型，而不是TCB或者TCB指针。</p>
<p>为什么仅仅保存整型就可以表示就绪队列呢？这个以后再说。</p>
<p>除了初始化就绪队列，还初始化了两个与优先级相关的变量以及两个和任务TCB相关的量。<br>
OSPrioCur	   		保存当前任务的优先级<br>
OSPrioHighRdy      保存当前就绪队列优先级最高的任务的优先级<br>
OSTCBCur 	          保存当前任务的TCB指针<br>
OSTCBHighRdy      保存当前就绪队列中最高优先级任务的TCB指针</p>
<h3 id="4os_inittcblist">4.OS_InitTCBList ()</h3>
<p>初始化TCB链表，这里主要强调的链表，主要是把在头文件里声明的</p>
<p>OS_TCB	OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS];		这个TCB数组拆开然后用指针将其连接起来。</p>
<pre><code class="language-c">for (ix = 0u; ix &lt; (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
        ix_next =  ix + 1u;
        ptcb1   = &amp;OSTCBTbl[ix];
        ptcb2   = &amp;OSTCBTbl[ix_next];
        ptcb1-&gt;OSTCBNext = ptcb2;
}

ptcb1                   = &amp;OSTCBTbl[ix];
ptcb1-&gt;OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
OSTCBFreeList           = &amp;OSTCBTbl[0];
</code></pre>
<p>除了进行free TCBs的初始化，还会进行以下两个变量的初始化</p>
<pre><code>OS_MemClr((INT8U *)&amp;OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
/*这里采取的强制转换很有意思。
OSTCBList	= (OS_TCB *)0;
</code></pre>
<p>OSTCBPrioTbl[]是用来存放对应的下标为优先级的任务的TCB指针，若该对应下标的任务已经被创建才会有相应的TCB指针，否则保持初始化的空值。这个表的作用是为了快速找个某一优先级对应的任务的任务指针。</p>
<p>OSTCBList就是指向任务块链表的头指针，这里面的任务包括当前所有存在的任务，就绪的，未就绪的。</p>
<h3 id="5os_initeventlist">5.OS_InitEventList()</h3>
<p>事件控制块链表的初始化，这个属于扩展的功能，与任务之间的通信相关，所以就先不讨论了，等到任务通信这个模块再进行讨论。</p>
<h2 id="三任务的创建">三.任务的创建</h2>
<h3 id="1任务函数的格式">1.任务函数的格式</h3>
<p>在ucosii中任务的形式如下：</p>
<p>实际上任务就是一个不带返回值具有死循环的函数</p>
<pre><code class="language-c">void task(void *p_arg)
{		
		while(1)
		{

		}
		
}
</code></pre>
<h3 id="2ostaskcreate">2.OSTaskCreate(）</h3>
<p>任务的创建</p>
<pre><code class="language-c">INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
    //任务函数
    //任务所需的参数
    //堆栈
    //优先级
</code></pre>
<ul>
<li>
<p>确保未在ISR中进行任务的创建。利用中断的嵌套层数OSIntNesting进行判断</p>
</li>
<li>
<p>对相应优先级的任务对应的OSTCBPrioTbl[prio]进行占位。由于ucosii仅支持的同一优先级的任务仅有一个，所以需先判断正在创建的任务的优先级是否已经被占用了。</p>
</li>
<li>
<p>堆栈初始化</p>
<pre><code class="language-c"> OS_STK *OSTaskStkInit (void (*task)(void *p_arg), 
 void *p_arg, OS_STK *ptos, INT16U opt)
</code></pre>
<p>所谓堆栈的初始化实际上就是对相关的寄存器进行模拟压栈的操作，并返回压栈后的栈顶指针。模拟压栈就是模仿任务切换时对相应寄存器进行的压栈操作。在这里主要的功能是确定堆栈栈顶指针的位置，同时把设置LR寄存器的值，并保存任务函数的地址，以及任务函数的参数指针。而其余的几个寄存器的值在这时是无意义的，不必关心其模拟压栈的内容。</p>
</li>
<li>
<p>TCB初始化</p>
<p>OS_TCBInit()</p>
<ul>
<li>从OSTCBFreeList获得一个空的tcb</li>
<li>把任务的相关信息放到这个空的tcb的相应位置</li>
<li>把被占位的OSTCBPrioTbl[]进行赋值，ptcb</li>
<li>把该tcb链入TCB链表</li>
<li>把该任务放进就绪队列</li>
</ul>
</li>
<li>
<p>是否开始调度</p>
<p>在这里还不会进行调度，因为调度的条件是OSRunning == OS_TRUE，而现在OSRunning == OS_FALSE。</p>
<p>OS_Sched()     //Schedule only if all ISRs done</p>
<ul>
<li>OS_SchedNew()  获得当前就绪队列中的最高的优先级，采用优先级位图的方式直接获得</li>
<li>判断当前执行的任务是否为最高优先级的任务，若不是则调用OS_TASK_SW()则进行任务切换。</li>
</ul>
</li>
</ul>
<h2 id="四操作系统的启动">四.操作系统的启动</h2>
<p>OSStart()</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="ucosii运行流程">ucosii运行流程</h1>
<h2 id="一系统时钟中断额初始化">一.系统时钟中断额初始化</h2>
<p>SysTick中断初始化，在轮转调度过程中，需要一个时钟中断来进行任务的切换。时钟中断的频率就是系统的心跳，也被称为时基，它决定了操作系统进行任务切换的频率。</p>
<h2 id="二操作系统初始化">二.操作系统初始化</h2>
<h3 id="1osinithookbegin">1.OSInitHookBegin()</h3>
<p>主要进行一些扩展功能的初始化</p>
<h3 id="2os_initmisc">2.OS_InitMisc()</h3>
<p>主要作用：进行杂项变量的初始化，主要有以下内容需要被初始化</p>
<pre><code class="language-c">OSIntNesting    		中断嵌套层数清零
OSLockNesting			
OSTaskCtr				任务计数清零
OSRunning				操作系统运行标志位清零
OSCtxSwCtr				任务切换计数清零
OSIdleCtr				
</code></pre>
<h3 id="3os_initrdylist">3.OS_InitRdyList()</h3>
<p>就绪队列的初始化，所谓就绪队列指由就绪任务构成的队列，但是这里实际上初始化的并不是队列，就绪队列里面保存的也不是就绪任务的TCB。</p>
<pre><code class="language-c">//以下是就绪队列实现的定义和初始化的代码
typedef unsigned char INT8U;

typedef  INT8U    OS_PRIO;

OS_EXT  OS_PRIO           OSRdyTbl[OS_RDY_TBL_SIZE];

for (i = 0u; i &lt; OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0u;
    }

</code></pre>
<p>从这里可以看出，就绪队列的本质是一个8位无符号整型数组，仅仅保存的是一个整型，而不是TCB或者TCB指针。</p>
<p>为什么仅仅保存整型就可以表示就绪队列呢？这个以后再说。</p>
<p>除了初始化就绪队列，还初始化了两个与优先级相关的变量以及两个和任务TCB相关的量。<br>
OSPrioCur	   		保存当前任务的优先级<br>
OSPrioHighRdy      保存当前就绪队列优先级最高的任务的优先级<br>
OSTCBCur 	          保存当前任务的TCB指针<br>
OSTCBHighRdy      保存当前就绪队列中最高优先级任务的TCB指针</p>
<h3 id="4os_inittcblist">4.OS_InitTCBList ()</h3>
<p>初始化TCB链表，这里主要强调的链表，主要是把在头文件里声明的</p>
<p>OS_TCB	OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS];		这个TCB数组拆开然后用指针将其连接起来。</p>
<pre><code class="language-c">for (ix = 0u; ix &lt; (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
        ix_next =  ix + 1u;
        ptcb1   = &amp;OSTCBTbl[ix];
        ptcb2   = &amp;OSTCBTbl[ix_next];
        ptcb1-&gt;OSTCBNext = ptcb2;
}

ptcb1                   = &amp;OSTCBTbl[ix];
ptcb1-&gt;OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
OSTCBFreeList           = &amp;OSTCBTbl[0];
</code></pre>
<p>除了进行free TCBs的初始化，还会进行以下两个变量的初始化</p>
<pre><code>OS_MemClr((INT8U *)&amp;OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
/*这里采取的强制转换很有意思。
OSTCBList	= (OS_TCB *)0;
</code></pre>
<p>OSTCBPrioTbl[]是用来存放对应的下标为优先级的任务的TCB指针，若该对应下标的任务已经被创建才会有相应的TCB指针，否则保持初始化的空值。这个表的作用是为了快速找个某一优先级对应的任务的任务指针。</p>
<p>OSTCBList就是指向任务块链表的头指针，这里面的任务包括当前所有存在的任务，就绪的，未就绪的。</p>
<h3 id="5os_initeventlist">5.OS_InitEventList()</h3>
<p>事件控制块链表的初始化，这个属于扩展的功能，与任务之间的通信相关，所以就先不讨论了，等到任务通信这个模块再进行讨论。</p>
<h2 id="三任务的创建">三.任务的创建</h2>
<h3 id="1任务函数的格式">1.任务函数的格式</h3>
<p>在ucosii中任务的形式如下：</p>
<p>实际上任务就是一个不带返回值具有死循环的函数</p>
<pre><code class="language-c">void task(void *p_arg)
{		
		while(1)
		{

		}
		
}
</code></pre>
<h3 id="2ostaskcreate">2.OSTaskCreate(）</h3>
<p>任务的创建</p>
<pre><code class="language-c">INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
    //任务函数
    //任务所需的参数
    //堆栈
    //优先级
</code></pre>
<ul>
<li>
<p>确保未在ISR中进行任务的创建。利用中断的嵌套层数OSIntNesting进行判断</p>
</li>
<li>
<p>对相应优先级的任务对应的OSTCBPrioTbl[prio]进行占位。由于ucosii仅支持的同一优先级的任务仅有一个，所以需先判断正在创建的任务的优先级是否已经被占用了。</p>
</li>
<li>
<p>堆栈初始化</p>
<pre><code class="language-c"> OS_STK *OSTaskStkInit (void (*task)(void *p_arg), 
 void *p_arg, OS_STK *ptos, INT16U opt)
</code></pre>
<p>所谓堆栈的初始化实际上就是对相关的寄存器进行模拟压栈的操作，并返回压栈后的栈顶指针。模拟压栈就是模仿任务切换时对相应寄存器进行的压栈操作。在这里主要的功能是确定堆栈栈顶指针的位置，同时把设置LR寄存器的值，并保存任务函数的地址，以及任务函数的参数指针。而其余的几个寄存器的值在这时是无意义的，不必关心其模拟压栈的内容。</p>
</li>
<li>
<p>TCB初始化</p>
<p>OS_TCBInit()</p>
<ul>
<li>从OSTCBFreeList获得一个空的tcb</li>
<li>把任务的相关信息放到这个空的tcb的相应位置</li>
<li>把被占位的OSTCBPrioTbl[]进行赋值，ptcb</li>
<li>把该tcb链入TCB链表</li>
<li>把该任务放进就绪队列</li>
</ul>
</li>
<li>
<p>是否开始调度</p>
<p>在这里还不会进行调度，因为调度的条件是OSRunning == OS_TRUE，而现在OSRunning == OS_FALSE。</p>
<p>OS_Sched()     //Schedule only if all ISRs done</p>
<ul>
<li>OS_SchedNew()  获得当前就绪队列中的最高的优先级，采用优先级位图的方式直接获得</li>
<li>判断当前执行的任务是否为最高优先级的任务，若不是则调用OS_TASK_SW()则进行任务切换。</li>
</ul>
</li>
</ul>
<h2 id="四操作系统的启动">四.操作系统的启动</h2>
<p>OSStart()</p>
<!-- more -->
<h3 id="1判断osrunning-os_false">1.判断OSRunning == OS_FALSE</h3>
<h3 id="2os_schednew">2.OS_SchedNew()</h3>
<p>获得当前就绪队列中的最高的优先级，采用优先级位图的方式直接获得</p>
<h3 id="3设置ospriocurostcbhighrdyostcbcur">3.设置OSPrioCur，OSTCBHighRdy，OSTCBCur</h3>
<h3 id="4osstarthighrdy">4.OSStartHighRdy()</h3>
<p>设置PendSV的中断优先级</p>
<p>初始化PSP</p>
<p>设置OSRunning标志为1</p>
<p>开启PendSV中断。</p>
]]></content>
    </entry>
</feed>